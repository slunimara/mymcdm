window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"mymcdm": {"fullname": "mymcdm", "modulename": "mymcdm", "kind": "module", "doc": "<p>This package is the result of the practical part of <a href=\"https://stag.upol.cz/StagPortletsJSR168/CleanUrl?urlid=prohlizeni-prace-search&studentSearchOsCislo=R20149&praceSearchTyp=bakal\u00e1\u0159sk\u00e1\">my bachelor thesis</a> on the <a href=\"https://www.inf.upol.cz\">Department of Computer Science, Palacky University, Olomouc</a>. This package is intended to serve as a tool for handling Multiple Attribute Decision Making problems. It can retrieve and process inputs, normalize alternatives, determine relative weights of criteria and process the inputs using decision methods to determine the decision objective of the model. </p>\n\n<h2 id=\"use-examples\">Use examples</h2>\n\n<p>The tool can be used both as a Python package using the API and via the console. The use of the console is more focused on smaller problems, while the use of the API package is focused on all types of problems.</p>\n\n<p>The console portion of the package allows the user to load a matrix of variants and criteria weights, normalize the variants, and finally determine the model objective. The user can go through the entire process of working with the VAV model in the command line, except for the ability to specify criteria weights. These must be specified in advance. This section is more geared towards working with smaller problems as it does not offer as much control when working with the data. The data can only be saved, dumped and loaded. </p>\n\n<p>The package provides two ways of working with VAV problems. The first way is to create a procedure from the implemented methods. The user imports all the required methods into his module and then can program the whole process himself. The decision process can be adapted to different needs and the user has more control over the results of the functions. </p>\n\n<p><strong>Using auxiliary method</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n  <span class=\"kn\">import</span> <span class=\"nn\">mymcdm</span>\n\n  <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n  <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">((</span><span class=\"mf\">0.20</span><span class=\"p\">,</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.40</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">))</span>\n  <span class=\"n\">alternatives</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n      <span class=\"p\">[</span>\n          <span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n      <span class=\"p\">]</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">decision</span><span class=\"p\">(</span>\n        <span class=\"n\">alternatives</span><span class=\"p\">,</span> \n        <span class=\"n\">weights</span><span class=\"p\">,</span> \n        <span class=\"n\">types</span><span class=\"p\">,</span> \n        <span class=\"s2\">&quot;VECTOR&quot;</span><span class=\"p\">,</span> \n        <span class=\"s2\">&quot;TOPSIS&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The second method is easier for users with less knowledge of VAV theory. The user can use a helper method called <strong>decision</strong>, which can be found in the <strong><a href=\"mymcdm/main.py\">main.py</a></strong> module. The method has several mandatory and optional parameters. The mandatory parameters are: the variance matrix, the weight vector, the code name of the normalization and decision methods. The optional parameters are: a vector of criteria types, a storage location, and a flag whether to store the result and process information. The only thing this method lacks is the ability to specify weights. I have chosen not to include this in the decision method and require that the criteria weights be predetermined.</p>\n\n<p><strong>Using API</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n  <span class=\"kn\">from</span> <span class=\"nn\">mymcdm.normalization</span> <span class=\"kn\">import</span> <span class=\"n\">vector</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">mymcdm.utils</span> <span class=\"kn\">import</span> <span class=\"n\">framing</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">mymcdm.methods</span> <span class=\"kn\">import</span> <span class=\"n\">topsis</span>\n\n  <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n  <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">((</span><span class=\"mf\">0.20</span><span class=\"p\">,</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.40</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">))</span>\n  <span class=\"n\">alternatives</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n      <span class=\"p\">[</span>\n          <span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span>\n          <span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n      <span class=\"p\">]</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"n\">alternatives</span><span class=\"p\">,</span> <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"n\">vector</span><span class=\"p\">(</span><span class=\"n\">alternatives</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">)</span>\n\n  <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">framing</span><span class=\"o\">.</span><span class=\"n\">frame_criterions</span><span class=\"p\">(</span><span class=\"n\">weights</span><span class=\"p\">,</span> <span class=\"n\">c_types</span><span class=\"o\">=</span><span class=\"n\">types</span><span class=\"p\">)</span>\n  <span class=\"n\">alternatives</span> <span class=\"o\">=</span> <span class=\"n\">framing</span><span class=\"o\">.</span><span class=\"n\">frame_alternatives</span><span class=\"p\">(</span><span class=\"n\">alternatives</span><span class=\"p\">,</span> <span class=\"n\">a_types</span><span class=\"o\">=</span><span class=\"n\">types</span><span class=\"p\">)</span>\n\n  <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">topsis</span><span class=\"p\">(</span><span class=\"n\">alternatives</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">)</span>\n\n  <span class=\"n\">decision_matrix</span> <span class=\"o\">=</span> <span class=\"n\">framing</span><span class=\"o\">.</span><span class=\"n\">make_decision_matrix</span><span class=\"p\">(</span><span class=\"n\">alternatives</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"methods-list-and-codenames\">Methods list and codenames</h2>\n\n<p>For completeness, I have provided a list of all methods. The auxiliary method as an argument takes the code name of normalization and decision methods.</p>\n\n<h3 id=\"decision-making-methods\">Decision making methods</h3>\n\n<table>\n<thead>\n<tr>\n  <th>Code name</th>\n  <th>Method name</th>\n  <th>References</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><strong>WSM</strong></td>\n  <td>Weighted Sum Model</td>\n  <td>[4]</td>\n</tr>\n<tr>\n  <td><strong>WPM</strong></td>\n  <td>Weighted Product Model</td>\n  <td>[4]</td>\n</tr>\n<tr>\n  <td><strong>TOPSIS</strong></td>\n  <td>Technique for Order of Preference by Similarity to Ideal Solution</td>\n  <td>[4] [5]</td>\n</tr>\n<tr>\n  <td><strong>VIKOR</strong></td>\n  <td>VIKOR</td>\n  <td>[5]</td>\n</tr>\n<tr>\n  <td><strong>ELECTRE</strong></td>\n  <td>Elimination and Choice Translating Reality</td>\n  <td>[4] [5] [6]</td>\n</tr>\n<tr>\n  <td><strong>AHP</strong></td>\n  <td>Analytic hierarchy process</td>\n  <td>[4] [5]</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"normalization-methods\">Normalization methods</h3>\n\n<table>\n<thead>\n<tr>\n  <th>Code name</th>\n  <th>Method name</th>\n  <th>References</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><strong>LOG</strong></td>\n  <td>Logarithmic normalization</td>\n  <td>[1]</td>\n</tr>\n<tr>\n  <td><strong>MAX</strong></td>\n  <td>Max normalization</td>\n  <td>[1]</td>\n</tr>\n<tr>\n  <td><strong>LINEAR</strong></td>\n  <td>Linear normalization</td>\n  <td>[2]</td>\n</tr>\n<tr>\n  <td><strong>MAXMIN</strong></td>\n  <td>Max-min normalization</td>\n  <td>[1]</td>\n</tr>\n<tr>\n  <td><strong>SUM</strong></td>\n  <td>Sum normalization</td>\n  <td>[1]</td>\n</tr>\n<tr>\n  <td><strong>VECTOR</strong></td>\n  <td>Vector normalization</td>\n  <td>[1]</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"weighting-methods\">Weighting methods</h3>\n\n<table>\n<thead>\n<tr>\n  <th>Name</th>\n  <th>Method name</th>\n  <th>References</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><strong>ENTROPY</strong></td>\n  <td>Entropy weights</td>\n  <td>[3]</td>\n</tr>\n<tr>\n  <td><strong>MEAN</strong></td>\n  <td>Mean Weight</td>\n  <td>[3]</td>\n</tr>\n<tr>\n  <td><strong>PAIRWISE</strong></td>\n  <td>Pairwise comparison</td>\n  <td>[3] [7] [8]</td>\n</tr>\n<tr>\n  <td><strong>POINT</strong></td>\n  <td>Point allocation</td>\n  <td>[3]</td>\n</tr>\n<tr>\n  <td><strong>SD</strong></td>\n  <td>Standard Deviation</td>\n  <td>[3]</td>\n</tr>\n<tr>\n  <td><strong>SVP</strong></td>\n  <td>Statistical Variance Procedure</td>\n  <td>[3]</td>\n</tr>\n<tr>\n  <td><strong>CRITIC</strong></td>\n  <td>Criteria importance through inter-criteria</td>\n  <td>[3]</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"input-examples\">Input examples</h2>\n\n<p>Therefore, for better work with data, I implemented a module containing functions for reading and writing data. The function <strong>load_data</strong> allows to read and process the required input data according to the type. If the key \"format\" is found in the file, which is equal to the value of \"matrix\" the loading of variants, weights and types of criteria will take place. If the value of the key \"format\" is equal to \"pairwise\", the comparison matrices are loaded and processed using the eigenvector method. The user can then retrieve the required data and make a decision based on it. The result of the analysis can be saved using the <strong>save_result</strong> function (or in the decision method when the \"save\" and \"folder\" arguments are specified), which receives an object of the <strong>Result</strong> class and saves it. Then the result of the analysis can be retrieved again using the <strong>load_data</strong> function if the path to the saved result is specified. I also use these methods for the console part of the package. All loaded and saved file formats are of type JSON.</p>\n\n<p><strong>Example input of decision matrix</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;format&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;matrix&quot;</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;types&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;weights&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">0.20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;alternatives&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">]]</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p><strong>[*] Example input of comparison matrices</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;format&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;pairwise&quot;</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;types&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;criteria&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;4&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;7&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/4&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;3&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;5&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/7&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/5&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">&quot;alternatives&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/4&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;4&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;4&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;9&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/4&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/9&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/5&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/7&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;5&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;7&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;5&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;9&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/5&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;4&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/9&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/4&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;5&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;3&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;9&quot;</span><span class=\"p\">],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"s2\">&quot;1/5&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1/9&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"references\">References</h2>\n\n<p>[1] Vafaei, N., Ribeiro, R. A., &amp; Camarinha-Matos, L. M. (2016b). Normalization Techniques for Multi-Criteria Decision Making: Analytical Hierarchy Process Case Study. Technological Innovation for Cyber-Physical Systems, 261\u2013269. <a href=\"https://doi.org/10.1007/978-3-319-31165-4_26\">https://doi.org/10.1007/978-3-319-31165-4_26</a></p>\n\n<p>[2] Natalja, K., Aleksandras, K., &amp; Kazimieras, Z. E. (2018). Statistical Analysis of MCDM Data Normalization Methods Using Monte Carlo Approach. The Case of Ternary Estimates Matrix. Economic Computation and Economic Cybernetics Studies and Research, 52(4/2018), 159\u2013175. <a href=\"https://doi.org/10.24818/18423264/52.4.18.11\">https://doi.org/10.24818/18423264/52.4.18.11</a></p>\n\n<p>[3] Odu, G. (2019). Weighting methods for multi-criteria decision making technique. Journal of Applied Sciences and Environmental Management, 23(8), 1449. <a href=\"https://doi.org/10.4314/jasem.v23i8.7\">https://doi.org/10.4314/jasem.v23i8.7</a></p>\n\n<p>[4] Triantaphyllou, E. (2000). Multi-criteria Decision Making Methods: A Comparative Study. Applied Optimization. <a href=\"https://doi.org/10.1007/978-1-4757-3157-6\">https://doi.org/10.1007/978-1-4757-3157-6</a></p>\n\n<p>[5] Uzun, B., Ozsahin, I., Agbor, V. O., &amp; Uzun Ozsahin, D. (2021). Theoretical aspects of multi-criteria decision-making (MCDM) methods. Applications of Multi-Criteria Decision-Making Theories in Healthcare and Biomedical Engineering, 3\u201340. <a href=\"https://doi.org/10.1016/b978-0-12-824086-1.00002-5\">https://doi.org/10.1016/b978-0-12-824086-1.00002-5</a></p>\n\n<p>[6] Tzeng, G., &amp; Huang, J. (2011). Multiple Attribute Decision Making: Methods and Applications. CRC Press.</p>\n\n<p>[7] Saaty, T. L., &amp; Hu, G. (1998). Ranking by Eigenvector versus other methods in the Analytic Hierarchy Process. Applied Mathematics Letters, 11(4), 121\u2013125. <a href=\"https://doi.org/10.1016/s0893-9659(98)00068-8\">https://doi.org/10.1016/s0893-9659(98)00068-8</a></p>\n\n<p>[8] Hwang, C., &amp; Yoon, K. (1981). Multiple Attribute Decision Making: Methods and Applications : a State-of-the-art Survey. Springer Verlag.</p>\n\n<p>[*] Wikipedia contributors. (2021, March 19). Analytic hierarchy process \u2013 leader example. Wikipedia. <a href=\"https://en.wikipedia.org/wiki/Analytic_hierarchy_process_%E2%80%93_leader_example#cite_note-SYNTHESIZING-9\">https://en.wikipedia.org/wiki/Analytic_hierarchy_process_%E2%80%93_leader_example#cite_note-SYNTHESIZING-9</a></p>\n\n<hr />\n"}, "mymcdm.decision": {"fullname": "mymcdm.decision", "modulename": "mymcdm", "qualname": "decision", "kind": "function", "doc": "<p>Method for making decision.\nThat includes normalization, scoring and saving result.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_matrix (NDArray):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>n_method (NDArray | None):</strong>  Normalization method code name that\nrepresents normalization method which is used to normalize alternatives.</li>\n<li><strong>d_method (str | None):</strong>  Scoring method code name that represents\ndecision method which is used get decision result.\nDefaults to \"WSM\".</li>\n<li><strong>save (bool, optional):</strong>  Saves scoring result to the file. Defaults to False.</li>\n<li><strong>folder (pathlib.Path | str, optional):</strong>  Path to the output folder.\nIf None then file will be saved in current folder.</li>\n</ul>\n\n<p>Code names for normalization and scoring could be found in README.md file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">d_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;WSM&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Result</span>:</span></span>", "funcdef": "def"}, "mymcdm.load_data": {"fullname": "mymcdm.load_data", "modulename": "mymcdm", "qualname": "load_data", "kind": "function", "doc": "<p>The method is designed to load the decision matrix data.\nSupported format is only JSON. Each key is optional.\nKey \"format\" must be set on one of these values \"matrix\", \"pairwise\", \"result\".\nIf none of these values is provided then \"format\" is set on the value \"matrix\".\nYou can find examples in the README.md file or package documentation.</p>\n\n<p>Fractions in comparsion matrices can be entered in\nstring format (e.g. \"1/3\", \"1/5\", \"1/7\") because\nthey are then converted to decimal format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (pathlib.Path | str):</strong>  Path of the file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If Alternative matrix do not have number of columns equal to\nsize of weight vector.</li>\n<li><strong>ValueError:</strong>  If Criteria type and weight vector do not have same size.</li>\n<li><strong>ValueError:</strong>  If file type is not JSON or CSV.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>For \"matrix\" format returns DecisionMatrix type dictionary and None.\n  For \"pairwise\" format returns DecisionMatrix type dictionary and dictionary\n      that contains \"alternative_cr\" and \"criteria_cr\" keys.\n  For \"result\" format returns Result type dictionary and None.</p>\n</blockquote>\n\n<p>Because all of the objects are optional, there could be None values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DecisionMatrix</span> <span class=\"o\">|</span> <span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.vikor": {"fullname": "mymcdm.vikor", "modulename": "mymcdm", "qualname": "vikor", "kind": "function", "doc": "<p>The VIKOR method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>v_value (int, optional):</strong>  Maximum group utility value.\nDefaults sets to 0.5.</li>\n</ul>\n\n<p>Returns one or more best solutions as alternative row index\ntogether with utility, regret and q order of alternatives.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">v_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.vikor_ranking": {"fullname": "mymcdm.vikor_ranking", "modulename": "mymcdm", "qualname": "vikor_ranking", "kind": "function", "doc": "<p>Applying the VIKOR method repeatedly to obtain a ranking of alternatives.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>v_value (int, optional):</strong>  Maximum group utility value. Defaults sets to 0.5.</li>\n</ul>\n\n<p>Returns rank of the alternatives in Series.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">v_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.ahp": {"fullname": "mymcdm.ahp", "modulename": "mymcdm", "qualname": "ahp", "kind": "function", "doc": "<p>The final step of Analytic hierarchy process (AHP).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If alternative matrix row sum isn't approximately\nequal to 1.</li>\n</ul>\n\n<p>Returns AHP score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.ahp_cm": {"fullname": "mymcdm.ahp_cm", "modulename": "mymcdm", "qualname": "ahp_cm", "kind": "function", "doc": "<p>Compute AHP-score from given alternatives comparsion matrices and\n  criteria comparsion matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>alternatives_cm (list[NDArray] | NDArray):</strong>  List of comparsion matrices.</li>\n<li><strong>criteria_cm (NDArray):</strong>  Comparsion matrix.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If number of columns of alternatives isn't\nequal to number of criteria.</li>\n<li><strong>ValueError:</strong>  If alternative matrix row sum isn't\napproximately equal to 1.</li>\n</ul>\n\n<p>Returns AHP score vector and boolean value is pairwise comparsions\nwas consistent. The best alternative (in the maximalization case)\nhave the biggest value in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">alternatives_cm</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_cm</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.electre": {"fullname": "mymcdm.electre", "modulename": "mymcdm", "qualname": "electre", "kind": "function", "doc": "<p>The ELECTRE method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>c_threshold (int, optional):</strong>  Concordance threshold.\nDefaults to None.</li>\n<li><strong>d_threshold (int, optional):</strong>  Discordance threshold.\nDefaults to None.</li>\n</ul>\n\n<p>If c_threshold or d_threshold is set to None\nthen concordance or discordance threshold is calculated\nas arithmetic mean of corcondance or discordance matrix.</p>\n\n<p>Returns vector that indicates order of alternatives.\nThe best alternative have the biggest value in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">c_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">d_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.topsis": {"fullname": "mymcdm.topsis", "modulename": "mymcdm", "qualname": "topsis", "kind": "function", "doc": "<p>The TOPSIS method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Diference of positive distance and negative distance is zero.</li>\n</ul>\n\n<p>Returns score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.wpm": {"fullname": "mymcdm.wpm", "modulename": "mymcdm", "qualname": "wpm", "kind": "function", "doc": "<p>The weighted product model method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n</ul>\n\n<p>Returns WPM score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.wsm": {"fullname": "mymcdm.wsm", "modulename": "mymcdm", "qualname": "wsm", "kind": "function", "doc": "<p>The weighted sum model method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n</ul>\n\n<p>Returns WSM score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.inout": {"fullname": "mymcdm.inout", "modulename": "mymcdm.inout", "kind": "module", "doc": "<p>Methods for saving and loading data.</p>\n"}, "mymcdm.inout.load_data": {"fullname": "mymcdm.inout.load_data", "modulename": "mymcdm.inout", "qualname": "load_data", "kind": "function", "doc": "<p>The method is designed to load the decision matrix data.\nSupported format is only JSON. Each key is optional.\nKey \"format\" must be set on one of these values \"matrix\", \"pairwise\", \"result\".\nIf none of these values is provided then \"format\" is set on the value \"matrix\".\nYou can find examples in the README.md file or package documentation.</p>\n\n<p>Fractions in comparsion matrices can be entered in\nstring format (e.g. \"1/3\", \"1/5\", \"1/7\") because\nthey are then converted to decimal format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (pathlib.Path | str):</strong>  Path of the file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If Alternative matrix do not have number of columns equal to\nsize of weight vector.</li>\n<li><strong>ValueError:</strong>  If Criteria type and weight vector do not have same size.</li>\n<li><strong>ValueError:</strong>  If file type is not JSON or CSV.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>For \"matrix\" format returns DecisionMatrix type dictionary and None.\n  For \"pairwise\" format returns DecisionMatrix type dictionary and dictionary\n      that contains \"alternative_cr\" and \"criteria_cr\" keys.\n  For \"result\" format returns Result type dictionary and None.</p>\n</blockquote>\n\n<p>Because all of the objects are optional, there could be None values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DecisionMatrix</span> <span class=\"o\">|</span> <span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.inout.read_JSON": {"fullname": "mymcdm.inout.read_JSON", "modulename": "mymcdm.inout", "qualname": "read_JSON", "kind": "function", "doc": "<p>Reads file in the path and returns parsed JSON to dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (pathlib.Path):</strong>  Path of the file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>FileNotFoundError:</strong>  If path does not exist or path is not file.</li>\n<li><strong>OSError:</strong>  When there is an error while reading a file.</li>\n<li><strong>ValueError:</strong>  When there is an error while parsing a file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "mymcdm.inout.parse_matrix_format": {"fullname": "mymcdm.inout.parse_matrix_format", "modulename": "mymcdm.inout", "qualname": "parse_matrix_format", "kind": "function", "doc": "<p>Auxiulary method for parsing data from dictionary\nthat have matrix format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  Data in dictionary format\nthat has been obtained from the file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If Alternative matrix do not have number of columns equal to\nsize of weight vector.</li>\n<li><strong>ValueError:</strong>  If Criteria type and weight vector do not have same size.</li>\n</ul>\n\n<p>Returns DecisionMatrix type dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DecisionMatrix</span>:</span></span>", "funcdef": "def"}, "mymcdm.inout.parse_pairwise_format": {"fullname": "mymcdm.inout.parse_pairwise_format", "modulename": "mymcdm.inout", "qualname": "parse_pairwise_format", "kind": "function", "doc": "<p>Auxiulary for parsing and handling data from dictionary\nthat have pairwise format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  Data in dictionary format\nthat has been obtained from the file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If criteria comparison matrix does not have\nsame number of rows as alternative comparsion matrices.</li>\n<li><strong>ValueError:</strong>  If Criteria type and weight vector do not have same size.</li>\n</ul>\n\n<p>Returns DecisionMatrix type dictionary and dictionary\nthat contains \"alternative_cr\" and \"criteria_cr\" keys.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DecisionMatrix</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.inout.parse_result_format": {"fullname": "mymcdm.inout.parse_result_format", "modulename": "mymcdm.inout", "qualname": "parse_result_format", "kind": "function", "doc": "<p>Auxiulary method that parse dictionary that have result format.\nDataframes saved as dictionary with orient type tight and\nSeries as dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  Data in dictionary format\nthat has been obtained from the file.</li>\n</ul>\n\n<p>Returns Result type dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Result</span>:</span></span>", "funcdef": "def"}, "mymcdm.inout.save_result": {"fullname": "mymcdm.inout.save_result", "modulename": "mymcdm.inout", "qualname": "save_result", "kind": "function", "doc": "<p>Saves decision data for later use.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative dataframe.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>decision_result (pd.DataFrame):</strong>  Decision result.</li>\n<li><strong>folder (pathlib.Path | str, optional):</strong>  Path to the output folder.\nIf None then file will be saved in current folder.</li>\n<li><strong>desc (str, optional):</strong>  String that will be in the name of the file.</li>\n</ul>\n\n<p>Returns path to the result file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">mymcdm</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Result</span>,</span><span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">desc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods": {"fullname": "mymcdm.methods", "modulename": "mymcdm.methods", "kind": "module", "doc": "<p>Submodule for MCDM scoring methods.</p>\n"}, "mymcdm.methods.vikor": {"fullname": "mymcdm.methods.vikor", "modulename": "mymcdm.methods.vikor", "kind": "module", "doc": "<p>VIKOR</p>\n\n<p>References: [5]</p>\n"}, "mymcdm.methods.vikor_ranking": {"fullname": "mymcdm.methods.vikor_ranking", "modulename": "mymcdm.methods", "qualname": "vikor_ranking", "kind": "function", "doc": "<p>Applying the VIKOR method repeatedly to obtain a ranking of alternatives.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>v_value (int, optional):</strong>  Maximum group utility value. Defaults sets to 0.5.</li>\n</ul>\n\n<p>Returns rank of the alternatives in Series.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">v_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.ahp": {"fullname": "mymcdm.methods.ahp", "modulename": "mymcdm.methods.ahp", "kind": "module", "doc": "<p>Analytic hierarchy process (AHP)</p>\n\n<p>References: [4] [5]</p>\n"}, "mymcdm.methods.ahp_cm": {"fullname": "mymcdm.methods.ahp_cm", "modulename": "mymcdm.methods", "qualname": "ahp_cm", "kind": "function", "doc": "<p>Compute AHP-score from given alternatives comparsion matrices and\n  criteria comparsion matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>alternatives_cm (list[NDArray] | NDArray):</strong>  List of comparsion matrices.</li>\n<li><strong>criteria_cm (NDArray):</strong>  Comparsion matrix.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If number of columns of alternatives isn't\nequal to number of criteria.</li>\n<li><strong>ValueError:</strong>  If alternative matrix row sum isn't\napproximately equal to 1.</li>\n</ul>\n\n<p>Returns AHP score vector and boolean value is pairwise comparsions\nwas consistent. The best alternative (in the maximalization case)\nhave the biggest value in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">alternatives_cm</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_cm</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.electre": {"fullname": "mymcdm.methods.electre", "modulename": "mymcdm.methods.electre", "kind": "module", "doc": "<p>ELECTRE</p>\n\n<p>References: [4] [5] [6]</p>\n"}, "mymcdm.methods.topsis": {"fullname": "mymcdm.methods.topsis", "modulename": "mymcdm.methods.topsis", "kind": "module", "doc": "<p>TOPSIS</p>\n\n<p>References: [4] [5]</p>\n"}, "mymcdm.methods.wpm": {"fullname": "mymcdm.methods.wpm", "modulename": "mymcdm.methods.wpm", "kind": "module", "doc": "<p>The weighted product model</p>\n\n<p>References: [4]</p>\n"}, "mymcdm.methods.wsm": {"fullname": "mymcdm.methods.wsm", "modulename": "mymcdm.methods.wsm", "kind": "module", "doc": "<p>The weighted sum model</p>\n\n<p>References: [4]</p>\n"}, "mymcdm.methods.ahp.ahp": {"fullname": "mymcdm.methods.ahp.ahp", "modulename": "mymcdm.methods.ahp", "qualname": "ahp", "kind": "function", "doc": "<p>The final step of Analytic hierarchy process (AHP).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If alternative matrix row sum isn't approximately\nequal to 1.</li>\n</ul>\n\n<p>Returns AHP score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.ahp.ahp_cm": {"fullname": "mymcdm.methods.ahp.ahp_cm", "modulename": "mymcdm.methods.ahp", "qualname": "ahp_cm", "kind": "function", "doc": "<p>Compute AHP-score from given alternatives comparsion matrices and\n  criteria comparsion matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>alternatives_cm (list[NDArray] | NDArray):</strong>  List of comparsion matrices.</li>\n<li><strong>criteria_cm (NDArray):</strong>  Comparsion matrix.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If number of columns of alternatives isn't\nequal to number of criteria.</li>\n<li><strong>ValueError:</strong>  If alternative matrix row sum isn't\napproximately equal to 1.</li>\n</ul>\n\n<p>Returns AHP score vector and boolean value is pairwise comparsions\nwas consistent. The best alternative (in the maximalization case)\nhave the biggest value in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">alternatives_cm</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_cm</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.ahp.alternatives_validation": {"fullname": "mymcdm.methods.ahp.alternatives_validation", "modulename": "mymcdm.methods.ahp", "qualname": "alternatives_validation", "kind": "function", "doc": "<p>Returns True if row sum is approximately equal to 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.electre.electre": {"fullname": "mymcdm.methods.electre.electre", "modulename": "mymcdm.methods.electre", "qualname": "electre", "kind": "function", "doc": "<p>The ELECTRE method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>c_threshold (int, optional):</strong>  Concordance threshold.\nDefaults to None.</li>\n<li><strong>d_threshold (int, optional):</strong>  Discordance threshold.\nDefaults to None.</li>\n</ul>\n\n<p>If c_threshold or d_threshold is set to None\nthen concordance or discordance threshold is calculated\nas arithmetic mean of corcondance or discordance matrix.</p>\n\n<p>Returns vector that indicates order of alternatives.\nThe best alternative have the biggest value in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">c_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">d_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.electre.concordance_discordance_matrices": {"fullname": "mymcdm.methods.electre.concordance_discordance_matrices", "modulename": "mymcdm.methods.electre", "qualname": "concordance_discordance_matrices", "kind": "function", "doc": "<p>Determine the concordance and discordance matrices.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>wn_matrix (pd.DataFrame):</strong>  Weighted normalized matrix.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether</li>\n<li>the attribute is beneficial (True) or cost (False).</li>\n<li>Defaults sets all attributes as benefitial.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wn_matrix</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "mymcdm.methods.electre.concordance_set": {"fullname": "mymcdm.methods.electre.concordance_set", "modulename": "mymcdm.methods.electre", "qualname": "concordance_set", "kind": "function", "doc": "<p>Calculates discordance index. For more information see [5] (2.15)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">k_row</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">l_row</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.electre.concordance_index": {"fullname": "mymcdm.methods.electre.concordance_index", "modulename": "mymcdm.methods.electre", "qualname": "concordance_index", "kind": "function", "doc": "<p>Calculates corcordnace index.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">concordance_set</span><span class=\"p\">:</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.electre.discordance_index": {"fullname": "mymcdm.methods.electre.discordance_index", "modulename": "mymcdm.methods.electre", "qualname": "discordance_index", "kind": "function", "doc": "<p>Calculates discordance index. For more information see [5] (2.16)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">discordance__set</span><span class=\"p\">:</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">k_row</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">l_row</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.topsis.topsis": {"fullname": "mymcdm.methods.topsis.topsis", "modulename": "mymcdm.methods.topsis", "qualname": "topsis", "kind": "function", "doc": "<p>The TOPSIS method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Diference of positive distance and negative distance is zero.</li>\n</ul>\n\n<p>Returns score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.vikor.vikor": {"fullname": "mymcdm.methods.vikor.vikor", "modulename": "mymcdm.methods.vikor", "qualname": "vikor", "kind": "function", "doc": "<p>The VIKOR method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>v_value (int, optional):</strong>  Maximum group utility value.\nDefaults sets to 0.5.</li>\n</ul>\n\n<p>Returns one or more best solutions as alternative row index\ntogether with utility, regret and q order of alternatives.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">v_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.vikor.vikor_ranking": {"fullname": "mymcdm.methods.vikor.vikor_ranking", "modulename": "mymcdm.methods.vikor", "qualname": "vikor_ranking", "kind": "function", "doc": "<p>Applying the VIKOR method repeatedly to obtain a ranking of alternatives.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n<li><strong>v_value (int, optional):</strong>  Maximum group utility value. Defaults sets to 0.5.</li>\n</ul>\n\n<p>Returns rank of the alternatives in Series.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">criteria_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">v_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.wpm.wpm": {"fullname": "mymcdm.methods.wpm.wpm", "modulename": "mymcdm.methods.wpm", "qualname": "wpm", "kind": "function", "doc": "<p>The weighted product model method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n</ul>\n\n<p>Returns WPM score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.methods.wsm.wsm": {"fullname": "mymcdm.methods.wsm.wsm", "modulename": "mymcdm.methods.wsm", "qualname": "wsm", "kind": "function", "doc": "<p>The weighted sum model method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (pd.DataFrame):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n</ul>\n\n<p>Returns WSM score vector. The best alternative\n(in the maximalization case) have the biggest\nvalue in the vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.normalization": {"fullname": "mymcdm.normalization", "modulename": "mymcdm.normalization", "kind": "module", "doc": "<p>Submodule for matrix normalization.</p>\n"}, "mymcdm.normalization.max": {"fullname": "mymcdm.normalization.max", "modulename": "mymcdm.normalization.max", "kind": "module", "doc": "<p>Implementation of max normalization method.</p>\n\n<p>References: [1]</p>\n"}, "mymcdm.normalization.linear": {"fullname": "mymcdm.normalization.linear", "modulename": "mymcdm.normalization.linear", "kind": "module", "doc": "<p>Implementation of linear normalization method.</p>\n\n<p>References: [2]</p>\n"}, "mymcdm.normalization.max_min": {"fullname": "mymcdm.normalization.max_min", "modulename": "mymcdm.normalization.max_min", "kind": "module", "doc": "<p>Implementation of max-min normalization method</p>\n\n<p>References: [1]</p>\n"}, "mymcdm.normalization.vector": {"fullname": "mymcdm.normalization.vector", "modulename": "mymcdm.normalization.vector", "kind": "module", "doc": "<p>Implementation of vector normalization method</p>\n\n<p>References: [1]</p>\n"}, "mymcdm.normalization.sum": {"fullname": "mymcdm.normalization.sum", "modulename": "mymcdm.normalization.sum", "kind": "module", "doc": "<p>Implementation of sum normalization method.</p>\n\n<p>References: [1]</p>\n"}, "mymcdm.normalization.logarithmic": {"fullname": "mymcdm.normalization.logarithmic", "modulename": "mymcdm.normalization.logarithmic", "kind": "module", "doc": "<p>Implementation of logarithmic normalization method</p>\n\n<p>References: [1]</p>\n"}, "mymcdm.normalization.linear.linear": {"fullname": "mymcdm.normalization.linear.linear", "modulename": "mymcdm.normalization.linear", "qualname": "linear", "kind": "function", "doc": "<p>Applies linear normalization on input matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Input matrix</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If maximum value in the colum that is benefitial is zero.</li>\n<li><strong>ValueError:</strong>  If minimum value in the colum that is cost is zero.</li>\n</ul>\n\n<p>Return normalized matrix and boolean matrix\nthat indicates new type of attributes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.normalization.logarithmic.logarithmic": {"fullname": "mymcdm.normalization.logarithmic.logarithmic", "modulename": "mymcdm.normalization.logarithmic", "qualname": "logarithmic", "kind": "function", "doc": "<p>Applies vector logarithmic on input matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Input matrix.</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<p>Return normalized matrix and boolean matrix\nthat indicates new type of attributes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.normalization.max.max": {"fullname": "mymcdm.normalization.max.max", "modulename": "mymcdm.normalization.max", "qualname": "max", "kind": "function", "doc": "<p>Applies max normalization on input matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Input matrix</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If maximum value in the colum is zero.</li>\n</ul>\n\n<p>Return normalized matrix and boolean matrix\nthat indicates new type of attributes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.normalization.max_min.max_min": {"fullname": "mymcdm.normalization.max_min.max_min", "modulename": "mymcdm.normalization.max_min", "qualname": "max_min", "kind": "function", "doc": "<p>Applies min-max normalization on input matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Input matrix</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<p>Return normalized matrix and boolean matrix\nthat indicates new type of attributes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.normalization.sum.sum": {"fullname": "mymcdm.normalization.sum.sum", "modulename": "mymcdm.normalization.sum", "qualname": "sum", "kind": "function", "doc": "<p>Applies sum normalization on input matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Input matrix</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If sum of column is zero.</li>\n<li><strong>ValueError:</strong>  If sum of inverted values on column is zero.</li>\n</ul>\n\n<p>Return normalized matrix and boolean matrix\nthat indicates new type of attributes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.normalization.vector.vector": {"fullname": "mymcdm.normalization.vector.vector", "modulename": "mymcdm.normalization.vector", "qualname": "vector", "kind": "function", "doc": "<p>Applies vector normalization on input matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Input matrix</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<p>Return normalized matrix and boolean matrix\nthat indicates new type of attributes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.utils": {"fullname": "mymcdm.utils", "modulename": "mymcdm.utils", "kind": "module", "doc": "<p>Submodule for utilility methods.</p>\n"}, "mymcdm.utils.frame_alternatives": {"fullname": "mymcdm.utils.frame_alternatives", "modulename": "mymcdm.utils", "qualname": "frame_alternatives", "kind": "function", "doc": "<p>Takes alternative matrix and returns Dataframe with heading.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_matrix (NDArray):</strong>  Alternative matrix.</li>\n<li><strong>row_names (NDArray, optional):</strong>  Name for the row indices.\nDefaults set indices as A1, A2,...</li>\n<li><strong>a_types (NDArray, optional):</strong>  Attributes types.\nDefaults set as beneficial.</li>\n</ul>\n\n<p>Symbol * indicates if criteria is beneficial or cost.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">row_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">a_types</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "mymcdm.utils.frame_criterions": {"fullname": "mymcdm.utils.frame_criterions", "modulename": "mymcdm.utils", "qualname": "frame_criterions", "kind": "function", "doc": "<p>Takes weight vector and returns Series with heading.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>column_names (NDArray, optional):</strong>  Name for the column indices.\nDefaults set indices as C1, C2,...</li>\n<li><strong>c_types (NDArray, optional):</strong>  Criterion types.\nDefaults set as beneficial.</li>\n</ul>\n\n<p>Symbol * indicates if criteria is beneficial or cost.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">w_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">c_types</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.utils.make_decision_matrix": {"fullname": "mymcdm.utils.make_decision_matrix", "modulename": "mymcdm.utils", "qualname": "make_decision_matrix", "kind": "function", "doc": "<p>Takes alternatives dataframe and weight series and returns decision matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_dataframe (DataFrame):</strong>  Alternative DataFrame.</li>\n<li><strong>w_series (Series):</strong>  Weight Series.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">w_series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "mymcdm.utils.decompose_decision_matrix": {"fullname": "mymcdm.utils.decompose_decision_matrix", "modulename": "mymcdm.utils", "qualname": "decompose_decision_matrix", "kind": "function", "doc": "<p>Takes decision matrix DataFrame from make_decision_matrix method\nand returns alternative matrix, weights, criteria type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>decision_matrix (DataFrame):</strong>  DataFrame from\nmake_decision_matrix method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>a_dataframe (DataFrame): Alternative DataFrame.</li>\n  <li>w_vector (NDArray): Weight vector.</li>\n  <li>c_types (NDArray): Criterion types.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">decision_matrix</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.utils.make_ranking": {"fullname": "mymcdm.utils.make_ranking", "modulename": "mymcdm.utils", "qualname": "make_ranking", "kind": "function", "doc": "<p>From given alternative score creates ranking.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, "mymcdm.utils.replace_fractions": {"fullname": "mymcdm.utils.replace_fractions", "modulename": "mymcdm.utils", "qualname": "replace_fractions", "kind": "function", "doc": "<p>Replace string fractions in numpy matrix and returns\nmatrix with floats. Accuracy is to 16 decimal places.\nWorks faster with a duplicate occurrence of a fraction.\nData must be number of fraction in form \"x/y\"\nwhere x, y is numbers and y must not be zero.</p>\n\n<p>Example:</p>\n\n<pre><code># Input\n[\"12\", \"1/3\", \"1/5\", \"1/7\", \"1/8\"]\n\n# Output\n[12, 0.3333333333333333, 0.2, 0.14285714285714285, 0.125]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.utils.Result": {"fullname": "mymcdm.utils.Result", "modulename": "mymcdm.utils", "qualname": "Result", "kind": "class", "doc": "<p>Result typed dictionary from decision method.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>decision (DataFrame):</strong>  Decision result.</li>\n<li><strong>alternatives (DataFrame):</strong>  Alternative Dataframe.\nweights (Series): Weight Series.</li>\n<li><strong>criteria_type (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).</li>\n<li><strong>n_method (NDArray | None):</strong>  Normalization method code name that\nrepresents normalization method which is used to normalize alternatives.</li>\n<li><strong>d_method (str | None):</strong>  Scoring method code name that represents\ndecision method which is used get decision result.</li>\n<li><strong>path (Path | str | None):</strong>  Path to the output file.</li>\n</ul>\n", "bases": "typing.TypedDict"}, "mymcdm.utils.DecisionMatrix": {"fullname": "mymcdm.utils.DecisionMatrix", "modulename": "mymcdm.utils", "qualname": "DecisionMatrix", "kind": "class", "doc": "<p>Decision matrix typed dictionary.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>a_matrix (NDArray):</strong>  Alternative matrix.</li>\n<li><strong>w_vector (NDArray):</strong>  Weight vector.</li>\n<li><strong>types (NDArray):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).</li>\n</ul>\n", "bases": "typing.TypedDict"}, "mymcdm.weighting": {"fullname": "mymcdm.weighting", "modulename": "mymcdm.weighting", "kind": "module", "doc": "<p>Submodule for weighting methods.</p>\n"}, "mymcdm.weighting.pairwise_comparisons": {"fullname": "mymcdm.weighting.pairwise_comparisons", "modulename": "mymcdm.weighting", "qualname": "pairwise_comparisons", "kind": "function", "doc": "<p>Compute priority of comparsion matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Comparsion matrix.</li>\n</ul>\n\n<p>Returns priority vector and consistency ratio (CR). If size of the matrix\nexceeds random index size then returns Null instead CR.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.pairwise_alternatives": {"fullname": "mymcdm.weighting.pairwise_alternatives", "modulename": "mymcdm.weighting", "qualname": "pairwise_alternatives", "kind": "function", "doc": "<p>Takes list of comparsion matrices and compute\nalternative matrix using parwise comparsion.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparsion_matrices (list[NDArray] | NDArray):</strong>  List of comparsion matrices.</li>\n</ul>\n\n<p>Returns alternative matrix and consistency ratio of comparsions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">comparsion_matrices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]]</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.is_consistent": {"fullname": "mymcdm.weighting.is_consistent", "modulename": "mymcdm.weighting", "qualname": "is_consistent", "kind": "function", "doc": "<p>Returns boolean value if decision was decided consistently.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ratio (int | None):</strong>  Consistency ratio.</li>\n<li><strong>threshold (int, optional):</strong>  Defines treshold for consistency ratio.\nDefaults to 0.1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ratio</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.entropy_method": {"fullname": "mymcdm.weighting.entropy_method", "modulename": "mymcdm.weighting", "qualname": "entropy_method", "kind": "function", "doc": "<p>Calculates weights using entropy method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_matrix (NDArray):</strong>  Alternative matrix</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<p>Returns weight vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.mean_weight": {"fullname": "mymcdm.weighting.mean_weight", "modulename": "mymcdm.weighting", "qualname": "mean_weight", "kind": "function", "doc": "<p>Returns vector of size n that contains 1/n values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>size (int):</strong>  Size of the required vector.\nTakes positive integer bigger than zero.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.standard_deviation": {"fullname": "mymcdm.weighting.standard_deviation", "modulename": "mymcdm.weighting", "qualname": "standard_deviation", "kind": "function", "doc": "<p>Calculates weights using Standard Deviation method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_matrix (NDArray):</strong>  Alternative matrix</li>\n</ul>\n\n<p>Returns weight vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.svp": {"fullname": "mymcdm.weighting.svp", "modulename": "mymcdm.weighting", "qualname": "svp", "kind": "function", "doc": "<p>Calculates weights using Statistical Variance Procedure.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_matrix (NDArray):</strong>  Alternative matrix</li>\n</ul>\n\n<p>Returns weight vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.critic": {"fullname": "mymcdm.weighting.critic", "modulename": "mymcdm.weighting", "qualname": "critic", "kind": "function", "doc": "<p>Calculates weights using Criteria importance through inter-criteria method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a_matrix (NDArray):</strong>  Alternative matrix</li>\n<li><strong>attributes_type (NDArray, optional):</strong>  Binary vector that indicates whether\nthe attribute is beneficial (True) or cost (False).\nDefaults sets all attributes as benefitial.</li>\n</ul>\n\n<p>Returns weight vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">attributes_type</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "mymcdm.weighting.pam": {"fullname": "mymcdm.weighting.pam", "modulename": "mymcdm.weighting", "qualname": "pam", "kind": "function", "doc": "<p>Point allocation method. The arithmetic mean\nis used to calculate the weights.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (NDArray):</strong>  Points matrix.\nEach row represents one expert's opinion.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If number in matrix is not positive.</li>\n<li><strong>ValueError:</strong>  If element in the matrix is not integer.</li>\n</ul>\n\n<p>Returns weight vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"mymcdm": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3412}, "mymcdm.decision": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 261, "bases": 0, "doc": 185}, "mymcdm.load_data": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 229}, "mymcdm.vikor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 152, "bases": 0, "doc": 105}, "mymcdm.vikor_ranking": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 161, "bases": 0, "doc": 101}, "mymcdm.ahp": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 86}, "mymcdm.ahp_cm": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 169, "bases": 0, "doc": 120}, "mymcdm.electre": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 142}, "mymcdm.topsis": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 141, "bases": 0, "doc": 106}, "mymcdm.wpm": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 59}, "mymcdm.wsm": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 59}, "mymcdm.inout": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "mymcdm.inout.load_data": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 229}, "mymcdm.inout.read_JSON": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 87}, "mymcdm.inout.parse_matrix_format": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 92}, "mymcdm.inout.parse_pairwise_format": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 103}, "mymcdm.inout.parse_result_format": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 57}, "mymcdm.inout.save_result": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 106}, "mymcdm.methods": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "mymcdm.methods.vikor": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "mymcdm.methods.vikor_ranking": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 161, "bases": 0, "doc": 101}, "mymcdm.methods.ahp": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "mymcdm.methods.ahp_cm": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 169, "bases": 0, "doc": 120}, "mymcdm.methods.electre": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "mymcdm.methods.topsis": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "mymcdm.methods.wpm": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "mymcdm.methods.wsm": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "mymcdm.methods.ahp.ahp": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 86}, "mymcdm.methods.ahp.ahp_cm": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 169, "bases": 0, "doc": 120}, "mymcdm.methods.ahp.alternatives_validation": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 13}, "mymcdm.methods.electre.electre": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 142}, "mymcdm.methods.electre.concordance_discordance_matrices": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 123, "bases": 0, "doc": 73}, "mymcdm.methods.electre.concordance_set": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 156, "bases": 0, "doc": 13}, "mymcdm.methods.electre.concordance_index": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 6}, "mymcdm.methods.electre.discordance_index": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 111, "bases": 0, "doc": 13}, "mymcdm.methods.topsis.topsis": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 141, "bases": 0, "doc": 106}, "mymcdm.methods.vikor.vikor": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 152, "bases": 0, "doc": 105}, "mymcdm.methods.vikor.vikor_ranking": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 161, "bases": 0, "doc": 101}, "mymcdm.methods.wpm.wpm": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 59}, "mymcdm.methods.wsm.wsm": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 59}, "mymcdm.normalization": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "mymcdm.normalization.max": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "mymcdm.normalization.linear": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "mymcdm.normalization.max_min": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "mymcdm.normalization.vector": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "mymcdm.normalization.sum": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "mymcdm.normalization.logarithmic": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "mymcdm.normalization.linear.linear": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 110}, "mymcdm.normalization.logarithmic.logarithmic": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 70}, "mymcdm.normalization.max.max": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 90}, "mymcdm.normalization.max_min.max_min": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 70}, "mymcdm.normalization.sum.sum": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 103}, "mymcdm.normalization.vector.vector": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 69}, "mymcdm.utils": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "mymcdm.utils.frame_alternatives": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 173, "bases": 0, "doc": 78}, "mymcdm.utils.frame_criterions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 173, "bases": 0, "doc": 78}, "mymcdm.utils.make_decision_matrix": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 42}, "mymcdm.utils.decompose_decision_matrix": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 131, "bases": 0, "doc": 79}, "mymcdm.utils.make_ranking": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 9}, "mymcdm.utils.replace_fractions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 77}, "mymcdm.utils.Result": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 130}, "mymcdm.utils.DecisionMatrix": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 57}, "mymcdm.weighting": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "mymcdm.weighting.pairwise_comparisons": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 102, "bases": 0, "doc": 49}, "mymcdm.weighting.pairwise_alternatives": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 150, "bases": 0, "doc": 48}, "mymcdm.weighting.is_consistent": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 48}, "mymcdm.weighting.entropy_method": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 139, "bases": 0, "doc": 60}, "mymcdm.weighting.mean_weight": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 38}, "mymcdm.weighting.standard_deviation": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 87, "bases": 0, "doc": 32}, "mymcdm.weighting.svp": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 87, "bases": 0, "doc": 32}, "mymcdm.weighting.critic": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 139, "bases": 0, "doc": 64}, "mymcdm.weighting.pam": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 86, "bases": 0, "doc": 79}}, "length": 72, "save": true}, "index": {"qualname": {"root": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.weighting.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.methods.ahp.alternatives_validation": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}}, "df": 6}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}}, "df": 3}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm.weighting.critic": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}}, "df": 3}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.weighting.entropy_method": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.topsis": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}}, "df": 3}}}}}}, "w": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.wpm": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.wsm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {"mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}}, "df": 4}, "k": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.weighting.entropy_method": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.inout.save_result": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.weighting.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm.weighting.svp": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}}, "fullname": {"root": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 72}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {"mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1.4142135623730951}}, "df": 4}, "k": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.weighting.entropy_method": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm.methods": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 22}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1.4142135623730951}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.weighting.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.methods.ahp.alternatives_validation": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}}, "df": 7}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}}, "df": 3}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm.weighting.critic": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 7}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.weighting.entropy_method": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.topsis": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "w": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.wpm": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}}, "df": 3}}, "s": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.wsm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}}, "df": 3}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.weighting": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 10}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 7}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.inout.save_result": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}}, "df": 2}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.weighting.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm.weighting.svp": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.normalization": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}}, "df": 13}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 9}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 7}, "1": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}, "3": {"9": {"docs": {"mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "5": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 6}, "docs": {"mymcdm.decision": {"tf": 14.491376746189438}, "mymcdm.load_data": {"tf": 8.06225774829855}, "mymcdm.vikor": {"tf": 11}, "mymcdm.vikor_ranking": {"tf": 11.313708498984761}, "mymcdm.ahp": {"tf": 8.774964387392123}, "mymcdm.ahp_cm": {"tf": 11.704699910719626}, "mymcdm.electre": {"tf": 11.958260743101398}, "mymcdm.topsis": {"tf": 10.63014581273465}, "mymcdm.wpm": {"tf": 8.774964387392123}, "mymcdm.wsm": {"tf": 8.774964387392123}, "mymcdm.inout.load_data": {"tf": 8.06225774829855}, "mymcdm.inout.read_JSON": {"tf": 4.47213595499958}, "mymcdm.inout.parse_matrix_format": {"tf": 5.291502622129181}, "mymcdm.inout.parse_pairwise_format": {"tf": 6.164414002968976}, "mymcdm.inout.parse_result_format": {"tf": 6.324555320336759}, "mymcdm.inout.save_result": {"tf": 8.602325267042627}, "mymcdm.methods.vikor": {"tf": 11}, "mymcdm.methods.vikor_ranking": {"tf": 11.313708498984761}, "mymcdm.methods.ahp": {"tf": 8.774964387392123}, "mymcdm.methods.ahp_cm": {"tf": 11.704699910719626}, "mymcdm.methods.electre": {"tf": 11.958260743101398}, "mymcdm.methods.topsis": {"tf": 10.63014581273465}, "mymcdm.methods.wpm": {"tf": 8.774964387392123}, "mymcdm.methods.wsm": {"tf": 8.774964387392123}, "mymcdm.methods.ahp.ahp": {"tf": 8.774964387392123}, "mymcdm.methods.ahp.ahp_cm": {"tf": 11.704699910719626}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 6.557438524302}, "mymcdm.methods.electre.electre": {"tf": 11.958260743101398}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 9.9498743710662}, "mymcdm.methods.electre.concordance_set": {"tf": 11.224972160321824}, "mymcdm.methods.electre.concordance_index": {"tf": 7.280109889280518}, "mymcdm.methods.electre.discordance_index": {"tf": 9.433981132056603}, "mymcdm.methods.topsis.topsis": {"tf": 10.63014581273465}, "mymcdm.methods.vikor.vikor": {"tf": 11}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 11.313708498984761}, "mymcdm.methods.wpm.wpm": {"tf": 8.774964387392123}, "mymcdm.methods.wsm.wsm": {"tf": 8.774964387392123}, "mymcdm.normalization.max": {"tf": 12.083045973594572}, "mymcdm.normalization.linear": {"tf": 12.083045973594572}, "mymcdm.normalization.max_min": {"tf": 12.083045973594572}, "mymcdm.normalization.vector": {"tf": 12.083045973594572}, "mymcdm.normalization.sum": {"tf": 12.083045973594572}, "mymcdm.normalization.logarithmic": {"tf": 12.083045973594572}, "mymcdm.normalization.linear.linear": {"tf": 12.083045973594572}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 12.083045973594572}, "mymcdm.normalization.max.max": {"tf": 12.083045973594572}, "mymcdm.normalization.max_min.max_min": {"tf": 12.083045973594572}, "mymcdm.normalization.sum.sum": {"tf": 12.083045973594572}, "mymcdm.normalization.vector.vector": {"tf": 12.083045973594572}, "mymcdm.utils.frame_alternatives": {"tf": 11.832159566199232}, "mymcdm.utils.frame_criterions": {"tf": 11.832159566199232}, "mymcdm.utils.make_decision_matrix": {"tf": 7.874007874011811}, "mymcdm.utils.decompose_decision_matrix": {"tf": 10.295630140987}, "mymcdm.utils.make_ranking": {"tf": 6.324555320336759}, "mymcdm.utils.replace_fractions": {"tf": 8.717797887081348}, "mymcdm.weighting.pairwise_comparisons": {"tf": 9.16515138991168}, "mymcdm.weighting.pairwise_alternatives": {"tf": 11.045361017187261}, "mymcdm.weighting.is_consistent": {"tf": 5.916079783099616}, "mymcdm.weighting.entropy_method": {"tf": 10.63014581273465}, "mymcdm.weighting.mean_weight": {"tf": 6.557438524302}, "mymcdm.weighting.standard_deviation": {"tf": 8.426149773176359}, "mymcdm.weighting.svp": {"tf": 8.426149773176359}, "mymcdm.weighting.critic": {"tf": 10.63014581273465}, "mymcdm.weighting.pam": {"tf": 8.426149773176359}}, "df": 64, "a": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 29, "n": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_set": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 2}, "mymcdm.normalization.linear": {"tf": 2}, "mymcdm.normalization.max_min": {"tf": 2}, "mymcdm.normalization.vector": {"tf": 2}, "mymcdm.normalization.sum": {"tf": 2}, "mymcdm.normalization.logarithmic": {"tf": 2}, "mymcdm.normalization.linear.linear": {"tf": 2}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 2}, "mymcdm.normalization.max.max": {"tf": 2}, "mymcdm.normalization.max_min.max_min": {"tf": 2}, "mymcdm.normalization.sum.sum": {"tf": 2}, "mymcdm.normalization.vector.vector": {"tf": 2}, "mymcdm.utils.frame_alternatives": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_criterions": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.7320508075688772}, "mymcdm.weighting.entropy_method": {"tf": 1.7320508075688772}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1.7320508075688772}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 54}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}}, "df": 3}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 14}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 24}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.decision": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 7}}}}}}, "n": {"docs": {"mymcdm.decision": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.decision": {"tf": 2.449489742783178}, "mymcdm.vikor": {"tf": 2}, "mymcdm.vikor_ranking": {"tf": 2}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 2.449489742783178}, "mymcdm.electre": {"tf": 2}, "mymcdm.topsis": {"tf": 2}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 2}, "mymcdm.methods.vikor_ranking": {"tf": 2}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 2.449489742783178}, "mymcdm.methods.electre": {"tf": 2}, "mymcdm.methods.topsis": {"tf": 2}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 2.449489742783178}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 2}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 2}, "mymcdm.methods.electre.concordance_set": {"tf": 2.449489742783178}, "mymcdm.methods.electre.concordance_index": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.discordance_index": {"tf": 2}, "mymcdm.methods.topsis.topsis": {"tf": 2}, "mymcdm.methods.vikor.vikor": {"tf": 2}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 2}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.normalization.max": {"tf": 2.8284271247461903}, "mymcdm.normalization.linear": {"tf": 2.8284271247461903}, "mymcdm.normalization.max_min": {"tf": 2.8284271247461903}, "mymcdm.normalization.vector": {"tf": 2.8284271247461903}, "mymcdm.normalization.sum": {"tf": 2.8284271247461903}, "mymcdm.normalization.logarithmic": {"tf": 2.8284271247461903}, "mymcdm.normalization.linear.linear": {"tf": 2.8284271247461903}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 2.8284271247461903}, "mymcdm.normalization.max.max": {"tf": 2.8284271247461903}, "mymcdm.normalization.max_min.max_min": {"tf": 2.8284271247461903}, "mymcdm.normalization.sum.sum": {"tf": 2.8284271247461903}, "mymcdm.normalization.vector.vector": {"tf": 2.8284271247461903}, "mymcdm.utils.frame_alternatives": {"tf": 2.449489742783178}, "mymcdm.utils.frame_criterions": {"tf": 2.449489742783178}, "mymcdm.utils.decompose_decision_matrix": {"tf": 2}, "mymcdm.utils.replace_fractions": {"tf": 2}, "mymcdm.weighting.pairwise_comparisons": {"tf": 2}, "mymcdm.weighting.pairwise_alternatives": {"tf": 2.449489742783178}, "mymcdm.weighting.entropy_method": {"tf": 2.449489742783178}, "mymcdm.weighting.mean_weight": {"tf": 1.4142135623730951}, "mymcdm.weighting.standard_deviation": {"tf": 2}, "mymcdm.weighting.svp": {"tf": 2}, "mymcdm.weighting.critic": {"tf": 2.449489742783178}, "mymcdm.weighting.pam": {"tf": 2}}, "df": 54}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_set": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 2}, "mymcdm.normalization.linear": {"tf": 2}, "mymcdm.normalization.max_min": {"tf": 2}, "mymcdm.normalization.vector": {"tf": 2}, "mymcdm.normalization.sum": {"tf": 2}, "mymcdm.normalization.logarithmic": {"tf": 2}, "mymcdm.normalization.linear.linear": {"tf": 2}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 2}, "mymcdm.normalization.max.max": {"tf": 2}, "mymcdm.normalization.max_min.max_min": {"tf": 2}, "mymcdm.normalization.sum.sum": {"tf": 2}, "mymcdm.normalization.vector.vector": {"tf": 2}, "mymcdm.utils.frame_alternatives": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_criterions": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.7320508075688772}, "mymcdm.weighting.entropy_method": {"tf": 1.7320508075688772}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1.7320508075688772}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 54}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 2}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 24}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_set": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 2}, "mymcdm.normalization.linear": {"tf": 2}, "mymcdm.normalization.max_min": {"tf": 2}, "mymcdm.normalization.vector": {"tf": 2}, "mymcdm.normalization.sum": {"tf": 2}, "mymcdm.normalization.logarithmic": {"tf": 2}, "mymcdm.normalization.linear.linear": {"tf": 2}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 2}, "mymcdm.normalization.max.max": {"tf": 2}, "mymcdm.normalization.max_min.max_min": {"tf": 2}, "mymcdm.normalization.sum.sum": {"tf": 2}, "mymcdm.normalization.vector.vector": {"tf": 2}, "mymcdm.utils.frame_alternatives": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_criterions": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.7320508075688772}, "mymcdm.weighting.entropy_method": {"tf": 1.7320508075688772}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1.7320508075688772}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 54}}}, "e": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 29, "s": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 9}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 22}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 4}}}}}}}}}, "d": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_set": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 2}, "mymcdm.normalization.linear": {"tf": 2}, "mymcdm.normalization.max_min": {"tf": 2}, "mymcdm.normalization.vector": {"tf": 2}, "mymcdm.normalization.sum": {"tf": 2}, "mymcdm.normalization.logarithmic": {"tf": 2}, "mymcdm.normalization.linear.linear": {"tf": 2}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 2}, "mymcdm.normalization.max.max": {"tf": 2}, "mymcdm.normalization.max_min.max_min": {"tf": 2}, "mymcdm.normalization.sum.sum": {"tf": 2}, "mymcdm.normalization.vector.vector": {"tf": 2}, "mymcdm.utils.frame_alternatives": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_criterions": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.7320508075688772}, "mymcdm.weighting.entropy_method": {"tf": 1.7320508075688772}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1.7320508075688772}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 54}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm.inout.save_result": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}}, "df": 25}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_set": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 2}, "mymcdm.normalization.linear": {"tf": 2}, "mymcdm.normalization.max_min": {"tf": 2}, "mymcdm.normalization.vector": {"tf": 2}, "mymcdm.normalization.sum": {"tf": 2}, "mymcdm.normalization.logarithmic": {"tf": 2}, "mymcdm.normalization.linear.linear": {"tf": 2}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 2}, "mymcdm.normalization.max.max": {"tf": 2}, "mymcdm.normalization.max_min.max_min": {"tf": 2}, "mymcdm.normalization.sum.sum": {"tf": 2}, "mymcdm.normalization.vector.vector": {"tf": 2}, "mymcdm.utils.frame_alternatives": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_criterions": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.7320508075688772}, "mymcdm.weighting.entropy_method": {"tf": 1.7320508075688772}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1.7320508075688772}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 54}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.make_ranking": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}}, "df": 7}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.utils.make_decision_matrix": {"tf": 1.7320508075688772}, "mymcdm.utils.make_ranking": {"tf": 2}}, "df": 24}}}}, "t": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_index": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.discordance_index": {"tf": 1.4142135623730951}}, "df": 3}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}}, "df": 26, "s": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.decision": {"tf": 1}}, "df": 1}}, "n": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}}, "df": 1}}, "v": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 25}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 6}}}}}, "c": {"docs": {"mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 18}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.make_ranking": {"tf": 1.4142135623730951}}, "df": 30}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods.electre.concordance_index": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {"mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}}, "df": 3}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 6}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}}, "df": 25}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_result_format": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}}, "df": 6, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.make_ranking": {"tf": 1.4142135623730951}}, "df": 30}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 7}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 5}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.discordance_index": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1.4142135623730951}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 13}}}, "l": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.4142135623730951}}, "df": 8}}}}, "k": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2}}}, "bases": {"root": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 2}}}}}}}}}}}, "doc": {"root": {"0": {"0": {"0": {"0": {"2": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 3.605551275463989}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 2}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 9}, "1": {"0": {"0": {"7": {"docs": {}, "df": 0, "/": {"9": {"7": {"8": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "1": {"6": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"9": {"7": {"8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "s": {"0": {"8": {"9": {"3": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 3.872983346207417}}, "df": 1}, "1": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}, "2": {"1": {"docs": {}, "df": 0, "\u2013": {"1": {"2": {"5": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "5": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}, "docs": {"mymcdm": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}}, "df": 2}, "4": {"2": {"8": {"5": {"7": {"1": {"4": {"2": {"8": {"5": {"7": {"1": {"4": {"2": {"8": {"5": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"9": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"9": {"docs": {}, "df": 0, "\u2013": {"1": {"7": {"5": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {"mymcdm": {"tf": 2.449489742783178}, "mymcdm.methods.electre.concordance_set": {"tf": 1}}, "df": 2}, "6": {"docs": {"mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 2}, "8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "9": {"8": {"1": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "9": {"8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {"mymcdm": {"tf": 4.898979485566356}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 14, "/": {"3": {"docs": {"mymcdm": {"tf": 2.23606797749979}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 4}, "4": {"docs": {"mymcdm": {"tf": 2}}, "df": 1}, "5": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 4}, "7": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 4}, "8": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}, "9": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {}, "df": 0, "n": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1}}}, "2": {"0": {"0": {"0": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "1": {"1": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "6": {"docs": {}, "df": 0, "b": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "9": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "2": {"1": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 3.872983346207417}}, "df": 1}, "3": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "4": {"8": {"1": {"8": {"docs": {}, "df": 0, "/": {"1": {"8": {"4": {"2": {"3": {"2": {"6": {"4": {"docs": {}, "df": 0, "/": {"5": {"2": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"docs": {"mymcdm": {"tf": 3.4641016151377544}}, "df": 1}, "6": {"1": {"docs": {}, "df": 0, "\u2013": {"2": {"6": {"9": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 5}, "3": {"0": {"docs": {"mymcdm": {"tf": 4.242640687119285}}, "df": 1}, "1": {"1": {"6": {"5": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"7": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "9": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 3.7416573867739413}}, "df": 1, "\u2013": {"4": {"0": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "4": {"0": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}, "3": {"1": {"4": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"5": {"7": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 3.605551275463989}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}}, "df": 6, "/": {"2": {"0": {"1": {"8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "5": {"2": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {"mymcdm": {"tf": 3.605551275463989}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 12}, "6": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1}}, "df": 2}, "7": {"docs": {"mymcdm": {"tf": 2.23606797749979}}, "df": 1}, "8": {"2": {"4": {"0": {"8": {"6": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 2}}, "df": 1}, "9": {"6": {"5": {"9": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {"mymcdm": {"tf": 2}}, "df": 1}, "docs": {"mymcdm": {"tf": 45.2658811910251}, "mymcdm.decision": {"tf": 7.54983443527075}, "mymcdm.load_data": {"tf": 7.211102550927978}, "mymcdm.vikor": {"tf": 6}, "mymcdm.vikor_ranking": {"tf": 6}, "mymcdm.ahp": {"tf": 5.916079783099616}, "mymcdm.ahp_cm": {"tf": 6.4031242374328485}, "mymcdm.electre": {"tf": 6.708203932499369}, "mymcdm.topsis": {"tf": 6.4031242374328485}, "mymcdm.wpm": {"tf": 4.898979485566356}, "mymcdm.wsm": {"tf": 4.898979485566356}, "mymcdm.inout": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 7.211102550927978}, "mymcdm.inout.read_JSON": {"tf": 6}, "mymcdm.inout.parse_matrix_format": {"tf": 5.830951894845301}, "mymcdm.inout.parse_pairwise_format": {"tf": 5.830951894845301}, "mymcdm.inout.parse_result_format": {"tf": 4.242640687119285}, "mymcdm.inout.save_result": {"tf": 6.557438524302}, "mymcdm.methods": {"tf": 1.7320508075688772}, "mymcdm.methods.vikor": {"tf": 2}, "mymcdm.methods.vikor_ranking": {"tf": 6}, "mymcdm.methods.ahp": {"tf": 2.23606797749979}, "mymcdm.methods.ahp_cm": {"tf": 6.4031242374328485}, "mymcdm.methods.electre": {"tf": 2}, "mymcdm.methods.topsis": {"tf": 2}, "mymcdm.methods.wpm": {"tf": 2}, "mymcdm.methods.wsm": {"tf": 2}, "mymcdm.methods.ahp.ahp": {"tf": 5.916079783099616}, "mymcdm.methods.ahp.ahp_cm": {"tf": 6.4031242374328485}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.electre": {"tf": 6.708203932499369}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 5.656854249492381}, "mymcdm.methods.electre.concordance_set": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_index": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.discordance_index": {"tf": 1.7320508075688772}, "mymcdm.methods.topsis.topsis": {"tf": 6.4031242374328485}, "mymcdm.methods.vikor.vikor": {"tf": 6}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 6}, "mymcdm.methods.wpm.wpm": {"tf": 4.898979485566356}, "mymcdm.methods.wsm.wsm": {"tf": 4.898979485566356}, "mymcdm.normalization": {"tf": 1.7320508075688772}, "mymcdm.normalization.max": {"tf": 2.23606797749979}, "mymcdm.normalization.linear": {"tf": 2.23606797749979}, "mymcdm.normalization.max_min": {"tf": 2}, "mymcdm.normalization.vector": {"tf": 2}, "mymcdm.normalization.sum": {"tf": 2.23606797749979}, "mymcdm.normalization.logarithmic": {"tf": 2}, "mymcdm.normalization.linear.linear": {"tf": 6.244997998398398}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 4.898979485566356}, "mymcdm.normalization.max.max": {"tf": 5.830951894845301}, "mymcdm.normalization.max_min.max_min": {"tf": 4.795831523312719}, "mymcdm.normalization.sum.sum": {"tf": 6.244997998398398}, "mymcdm.normalization.vector.vector": {"tf": 4.795831523312719}, "mymcdm.utils": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_alternatives": {"tf": 5.5677643628300215}, "mymcdm.utils.frame_criterions": {"tf": 5.5677643628300215}, "mymcdm.utils.make_decision_matrix": {"tf": 4.58257569495584}, "mymcdm.utils.decompose_decision_matrix": {"tf": 6.082762530298219}, "mymcdm.utils.make_ranking": {"tf": 1.7320508075688772}, "mymcdm.utils.replace_fractions": {"tf": 3.7416573867739413}, "mymcdm.utils.Result": {"tf": 7.0710678118654755}, "mymcdm.utils.DecisionMatrix": {"tf": 5.196152422706632}, "mymcdm.weighting": {"tf": 1.7320508075688772}, "mymcdm.weighting.pairwise_comparisons": {"tf": 4.242640687119285}, "mymcdm.weighting.pairwise_alternatives": {"tf": 4.358898943540674}, "mymcdm.weighting.is_consistent": {"tf": 4.69041575982343}, "mymcdm.weighting.entropy_method": {"tf": 4.795831523312719}, "mymcdm.weighting.mean_weight": {"tf": 3.872983346207417}, "mymcdm.weighting.standard_deviation": {"tf": 4.123105625617661}, "mymcdm.weighting.svp": {"tf": 4.123105625617661}, "mymcdm.weighting.critic": {"tf": 4.795831523312719}, "mymcdm.weighting.pam": {"tf": 5.830951894845301}}, "df": 72, "t": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}}, "df": 7, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 2.23606797749979}}, "df": 1}, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"mymcdm": {"tf": 9}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 2.449489742783178}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.7320508075688772}, "mymcdm.ahp": {"tf": 2.23606797749979}, "mymcdm.ahp_cm": {"tf": 2}, "mymcdm.electre": {"tf": 2.23606797749979}, "mymcdm.topsis": {"tf": 2.449489742783178}, "mymcdm.wpm": {"tf": 2.23606797749979}, "mymcdm.wsm": {"tf": 2.23606797749979}, "mymcdm.inout.load_data": {"tf": 2.449489742783178}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 2}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp": {"tf": 2.23606797749979}, "mymcdm.methods.ahp_cm": {"tf": 2}, "mymcdm.methods.electre": {"tf": 2.23606797749979}, "mymcdm.methods.topsis": {"tf": 2.449489742783178}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 2.23606797749979}, "mymcdm.methods.ahp.ahp_cm": {"tf": 2}, "mymcdm.methods.electre.electre": {"tf": 2.23606797749979}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 2.449489742783178}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.7320508075688772}, "mymcdm.methods.wpm.wpm": {"tf": 2.23606797749979}, "mymcdm.methods.wsm.wsm": {"tf": 2.23606797749979}, "mymcdm.normalization.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 1.7320508075688772}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1.7320508075688772}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1.7320508075688772}}, "df": 55, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}}, "df": 3}}, "n": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 9}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}}, "df": 3, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.electre": {"tf": 2.6457513110645907}, "mymcdm.methods.electre": {"tf": 2.6457513110645907}, "mymcdm.methods.electre.electre": {"tf": 2.6457513110645907}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 2}, "mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_result_format": {"tf": 1.7320508075688772}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 2}, "mymcdm.normalization.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 2}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector.vector": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1.7320508075688772}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 38}, "n": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"mymcdm": {"tf": 3.872983346207417}, "mymcdm.decision": {"tf": 2.23606797749979}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 27, "o": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}}, "df": 4}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}}, "df": 3}}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 2.23606797749979}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 2.23606797749979}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_result_format": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector.vector": {"tf": 1.4142135623730951}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 36, "s": {"docs": {"mymcdm": {"tf": 3.872983346207417}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 5}, "d": {"docs": {"mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 2}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 3.1622776601683795}, "mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 32}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 7}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 2.6457513110645907}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 1, "d": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 3}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}}, "df": 7}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.read_JSON": {"tf": 2.449489742783178}, "mymcdm.inout.save_result": {"tf": 1.7320508075688772}, "mymcdm.utils.Result": {"tf": 1.7320508075688772}}, "df": 7, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 2.23606797749979}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 3.4641016151377544}, "mymcdm.ahp": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "d": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 2, "s": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.topsis": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 5}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 23}}, "i": {"docs": {"mymcdm": {"tf": 2.23606797749979}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 3.4641016151377544}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 2.449489742783178}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1.7320508075688772}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 2.449489742783178}, "mymcdm.inout.read_JSON": {"tf": 1.7320508075688772}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 2.23606797749979}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1.7320508075688772}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 2.23606797749979}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.7320508075688772}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1.7320508075688772}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1.7320508075688772}}, "df": 42, "n": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}}, "df": 6}}, "n": {"docs": {"mymcdm": {"tf": 2.8284271247461903}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 36, "t": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1.4142135623730951}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 2}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.normalization.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector.vector": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 14, "s": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 3}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm.decision": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector.vector": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 32}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 7}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"mymcdm": {"tf": 2}}, "df": 1}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}}, "df": 6}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 2.449489742783178}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 2}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 2}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 29}}, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 3}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_result_format": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1.7320508075688772}, "mymcdm.utils.Result": {"tf": 1.7320508075688772}}, "df": 7, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}}, "df": 12, "s": {"docs": {"mymcdm.load_data": {"tf": 2}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 2}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 46}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "d": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}}, "df": 13}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3}}, "s": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}}, "df": 5}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 21}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1.7320508075688772}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 12, "s": {"docs": {"mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "f": {"docs": {"mymcdm": {"tf": 6}, "mymcdm.load_data": {"tf": 2.449489742783178}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 2}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 2.449489742783178}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 2}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 2}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.7320508075688772}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.7320508075688772}, "mymcdm.weighting.mean_weight": {"tf": 1.4142135623730951}}, "df": 41, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector.vector": {"tf": 1}}, "df": 15, "l": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3}}, "e": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 6}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 31}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 2}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 2}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 2}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 36, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}}, "df": 7}}}, "g": {"docs": {}, "df": 0, "/": {"1": {"0": {"docs": {"mymcdm": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 2.23606797749979}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"mymcdm": {"tf": 2.23606797749979}}, "df": 1, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}}, "df": 4}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 3}, "mymcdm.decision": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}}, "df": 2}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm": {"tf": 2.8284271247461903}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 2.23606797749979}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 2.23606797749979}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization": {"tf": 1}, "mymcdm.normalization.max": {"tf": 2.23606797749979}, "mymcdm.normalization.linear": {"tf": 2.23606797749979}, "mymcdm.normalization.max_min": {"tf": 2.23606797749979}, "mymcdm.normalization.vector": {"tf": 2.23606797749979}, "mymcdm.normalization.sum": {"tf": 2.23606797749979}, "mymcdm.normalization.logarithmic": {"tf": 2.23606797749979}, "mymcdm.normalization.linear.linear": {"tf": 2.23606797749979}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 2.23606797749979}, "mymcdm.normalization.max.max": {"tf": 2.23606797749979}, "mymcdm.normalization.max_min.max_min": {"tf": 2.23606797749979}, "mymcdm.normalization.sum.sum": {"tf": 2.23606797749979}, "mymcdm.normalization.vector.vector": {"tf": 2.23606797749979}, "mymcdm.utils.frame_alternatives": {"tf": 1.7320508075688772}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 2.23606797749979}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.utils.DecisionMatrix": {"tf": 1.7320508075688772}, "mymcdm.weighting.pairwise_comparisons": {"tf": 2}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.4142135623730951}, "mymcdm.weighting.entropy_method": {"tf": 1.4142135623730951}, "mymcdm.weighting.standard_deviation": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 2}}, "df": 56}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.7320508075688772}}, "df": 9}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "x": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}}, "df": 5, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}}, "df": 10}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 15}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 3.4641016151377544}, "mymcdm.decision": {"tf": 2.6457513110645907}, "mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 2.6457513110645907}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 36, "s": {"docs": {"mymcdm": {"tf": 4.358898943540674}, "mymcdm.inout": {"tf": 1}, "mymcdm.methods": {"tf": 1}, "mymcdm.utils": {"tf": 1}, "mymcdm.weighting": {"tf": 1}}, "df": 5}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 5}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 2.23606797749979}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 7}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.methods": {"tf": 1}}, "df": 2}}}, "d": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3}}, "b": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"mymcdm": {"tf": 2.8284271247461903}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}}, "df": 6, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 32}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 28}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 21}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.decision": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 16}}}}}}, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 30}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 18}}, "r": {"docs": {"mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 4.69041575982343}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.7320508075688772}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 2}, "mymcdm.utils.Result": {"tf": 2.23606797749979}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 10, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 4}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 3}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.7320508075688772}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 31}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {"mymcdm.inout.save_result": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm": {"tf": 3}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_result_format": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 9, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 2}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 2}, "mymcdm.utils.decompose_decision_matrix": {"tf": 2.449489742783178}, "mymcdm.utils.Result": {"tf": 1.7320508075688772}}, "df": 27, "s": {"docs": {"mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.topsis": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}}, "df": 3}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.load_data": {"tf": 2}, "mymcdm.inout.load_data": {"tf": 2}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_pairwise_format": {"tf": 2}, "mymcdm.inout.parse_result_format": {"tf": 2.23606797749979}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 8}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 6}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "c": {"1": {"docs": {"mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 1}, "2": {"docs": {"mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 1}, "docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 6, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 5, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 2}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 2}, "mymcdm.methods.ahp.ahp_cm": {"tf": 2}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_alternatives": {"tf": 2}}, "df": 8, "s": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 4}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 2}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 4}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}}, "df": 4}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}}, "df": 3, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 32}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1}}, "df": 4, "n": {"docs": {"mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}}, "df": 6}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods.electre.concordance_index": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 3.3166247903554}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}}, "df": 3}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1, "d": {"docs": {"mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}}, "df": 3}, "s": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.concordance_index": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 7}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 16}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm": {"tf": 3.7416573867739413}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.7320508075688772}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1.4142135623730951}}, "df": 27}, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}}, "df": 2, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm.utils.make_ranking": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}, "m": {"docs": {"mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}}, "df": 3}}, "s": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.decision": {"tf": 2}, "mymcdm.methods": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}}, "df": 16}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 2}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}}, "df": 7}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 28}}, "e": {"docs": {"mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.decision": {"tf": 1}}, "df": 2, "d": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.decision": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 4}, "s": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.inout": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.7320508075688772}}, "df": 13}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.methods": {"tf": 1}, "mymcdm.normalization": {"tf": 1}, "mymcdm.utils": {"tf": 1}, "mymcdm.weighting": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1.4142135623730951}, "mymcdm.weighting.mean_weight": {"tf": 1.7320508075688772}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}}, "df": 3}}}}}}}}, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "v": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 2.8284271247461903}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"mymcdm": {"tf": 2.23606797749979}, "mymcdm.inout.save_result": {"tf": 1}}, "df": 2, "d": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 4}, "r": {"docs": {"mymcdm": {"tf": 2.449489742783178}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 6}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.utils": {"tf": 1}}, "df": 1}}}}}}}}, "z": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"1": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1}}, "df": 1}, "2": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1}}, "df": 1}, "docs": {"mymcdm": {"tf": 3.872983346207417}, "mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 34, "s": {"docs": {"mymcdm": {"tf": 2.6457513110645907}, "mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 33, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 31, "s": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1.7320508075688772}, "mymcdm.normalization.linear": {"tf": 1.7320508075688772}, "mymcdm.normalization.max_min": {"tf": 1.7320508075688772}, "mymcdm.normalization.vector": {"tf": 1.7320508075688772}, "mymcdm.normalization.sum": {"tf": 1.7320508075688772}, "mymcdm.normalization.logarithmic": {"tf": 1.7320508075688772}, "mymcdm.normalization.linear.linear": {"tf": 1.7320508075688772}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.7320508075688772}, "mymcdm.normalization.max.max": {"tf": 1.7320508075688772}, "mymcdm.normalization.max_min.max_min": {"tf": 1.7320508075688772}, "mymcdm.normalization.sum.sum": {"tf": 1.7320508075688772}, "mymcdm.normalization.vector.vector": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1.4142135623730951}, "mymcdm.weighting.critic": {"tf": 1.4142135623730951}}, "df": 31}}}}}}}}}, "n": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}}, "df": 2, "d": {"docs": {"mymcdm": {"tf": 5.477225575051661}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 2.23606797749979}, "mymcdm.vikor": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 2.23606797749979}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 2}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.4142135623730951}}, "df": 38}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.ahp": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1.7320508075688772}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1.4142135623730951}, "mymcdm.wsm": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1.4142135623730951}, "mymcdm.methods.wsm.wsm": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1.4142135623730951}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.make_ranking": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.4142135623730951}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 41, "s": {"docs": {"mymcdm": {"tf": 3.605551275463989}, "mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.electre": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}}, "df": 16}}}}}}}}}}, "l": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 31, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}}, "df": 7}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}, "s": {"docs": {"mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}}, "df": 12}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 3}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 3}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 2}}, "df": 1}}}, "e": {"docs": {"mymcdm": {"tf": 2.23606797749979}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}}, "df": 3}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 59}}}}}}}, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 4}}}}}}}}}, "h": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.ahp": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}}, "df": 7}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm": {"tf": 2.449489742783178}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 3.3166247903554}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods": {"tf": 1}, "mymcdm.methods.electre.concordance_set": {"tf": 1}, "mymcdm.methods.electre.discordance_index": {"tf": 1}, "mymcdm.normalization": {"tf": 1}, "mymcdm.utils": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.weighting": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 17, "m": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.load_data": {"tf": 2.8284271247461903}, "mymcdm.inout.load_data": {"tf": 2.8284271247461903}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_result_format": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.decision": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.inout.save_result": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.ahp": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.read_JSON": {"tf": 2.23606797749979}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.7320508075688772}, "mymcdm.utils.Result": {"tf": 1}}, "df": 10, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 2}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.make_ranking": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}}, "df": 10}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 2}}, "df": 1}}}, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 2.449489742783178}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 31}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}}, "df": 4}, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.7320508075688772}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 24}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 2.23606797749979}, "mymcdm.ahp": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}}, "df": 4}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {"mymcdm": {"tf": 2.449489742783178}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.decision": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}}, "df": 3, "d": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}}, "df": 13}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 3.4641016151377544}, "mymcdm.decision": {"tf": 2}, "mymcdm.normalization": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}}, "df": 15}}}}}}}}}}}, "t": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 2}, "mymcdm.electre": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 2}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1.7320508075688772}, "mymcdm.methods.electre.electre": {"tf": 1.7320508075688772}, "mymcdm.utils.Result": {"tf": 1.7320508075688772}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.topsis": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}}, "df": 3}}}}}}, "w": {"docs": {"mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}}, "df": 12}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 2}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 9, "s": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"mymcdm": {"tf": 2.449489742783178}}, "df": 1}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 2.8284271247461903}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.decision": {"tf": 2}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1.4142135623730951}, "mymcdm.normalization.max_min.max_min": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.vector.vector": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_alternatives": {"tf": 1.7320508075688772}, "mymcdm.utils.frame_criterions": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}, "mymcdm.utils.DecisionMatrix": {"tf": 1.7320508075688772}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1.4142135623730951}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 51}}}}}}}, "w": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.make_decision_matrix": {"tf": 1}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}}, "df": 28, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.decision": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1.4142135623730951}, "mymcdm.utils.make_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 39, "s": {"docs": {"mymcdm": {"tf": 3.872983346207417}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 8}, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.weighting": {"tf": 1}}, "df": 2}}}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.decision": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1.4142135623730951}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}}, "df": 2}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1}}, "df": 31}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 2}}, "df": 1}}}, "s": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm": {"tf": 2.449489742783178}, "mymcdm.vikor": {"tf": 1}, "mymcdm.inout.parse_result_format": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.utils.frame_alternatives": {"tf": 1}, "mymcdm.utils.frame_criterions": {"tf": 1}, "mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}}, "df": 8}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}}, "df": 3}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "s": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 4}}, "s": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.decision": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}}, "df": 5}}, "p": {"docs": {}, "df": 0, "m": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wpm.wpm": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1}}, "df": 1}}, "e": {"2": {"docs": {}, "df": 0, "%": {"8": {"0": {"docs": {}, "df": 0, "%": {"9": {"3": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 2, "s": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3}, "#": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm.weighting.pairwise_comparisons": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.weighting.entropy_method": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.electre": {"tf": 1}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.electre.electre": {"tf": 1}}, "df": 4}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm.weighting.pam": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp.alternatives_validation": {"tf": 1}}, "df": 11}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.inout.read_JSON": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "v": {"2": {"3": {"docs": {}, "df": 0, "i": {"8": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {"mymcdm": {"tf": 1}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "a": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 7}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.weighting.svp": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1}, "mymcdm.vikor": {"tf": 1.4142135623730951}, "mymcdm.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 1}, "mymcdm.topsis": {"tf": 1}, "mymcdm.wpm": {"tf": 1}, "mymcdm.wsm": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.wpm": {"tf": 1}, "mymcdm.methods.wsm": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.4142135623730951}, "mymcdm.methods.wpm.wpm": {"tf": 1}, "mymcdm.methods.wsm.wsm": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.weighting.is_consistent": {"tf": 1}}, "df": 32, "s": {"docs": {"mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 5}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.load_data": {"tf": 1.7320508075688772}, "mymcdm.ahp": {"tf": 1}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.topsis": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1.7320508075688772}, "mymcdm.inout.read_JSON": {"tf": 1}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1.4142135623730951}, "mymcdm.methods.ahp": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.ahp.ahp": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1.4142135623730951}}, "df": 21}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 2.6457513110645907}, "mymcdm.decision": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.vikor": {"tf": 1.7320508075688772}, "mymcdm.vikor_ranking": {"tf": 1.7320508075688772}, "mymcdm.ahp": {"tf": 2}, "mymcdm.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.electre": {"tf": 2.23606797749979}, "mymcdm.topsis": {"tf": 2.23606797749979}, "mymcdm.wpm": {"tf": 2}, "mymcdm.wsm": {"tf": 2}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_matrix_format": {"tf": 1.4142135623730951}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}, "mymcdm.inout.save_result": {"tf": 1.4142135623730951}, "mymcdm.methods.vikor": {"tf": 1.7320508075688772}, "mymcdm.methods.vikor_ranking": {"tf": 1.7320508075688772}, "mymcdm.methods.ahp": {"tf": 2}, "mymcdm.methods.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre": {"tf": 2.23606797749979}, "mymcdm.methods.topsis": {"tf": 2.23606797749979}, "mymcdm.methods.wpm": {"tf": 2}, "mymcdm.methods.wsm": {"tf": 2}, "mymcdm.methods.ahp.ahp": {"tf": 2}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1.4142135623730951}, "mymcdm.methods.electre.electre": {"tf": 2.23606797749979}, "mymcdm.methods.electre.concordance_discordance_matrices": {"tf": 1.7320508075688772}, "mymcdm.methods.topsis.topsis": {"tf": 2.23606797749979}, "mymcdm.methods.vikor.vikor": {"tf": 1.7320508075688772}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1.7320508075688772}, "mymcdm.methods.wpm.wpm": {"tf": 2}, "mymcdm.methods.wsm.wsm": {"tf": 2}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.max_min": {"tf": 1}, "mymcdm.normalization.vector": {"tf": 1}, "mymcdm.normalization.sum": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.max_min.max_min": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1}, "mymcdm.normalization.vector.vector": {"tf": 1.4142135623730951}, "mymcdm.utils.frame_criterions": {"tf": 1.7320508075688772}, "mymcdm.utils.decompose_decision_matrix": {"tf": 1.4142135623730951}, "mymcdm.utils.Result": {"tf": 1}, "mymcdm.utils.DecisionMatrix": {"tf": 1.7320508075688772}, "mymcdm.weighting.pairwise_comparisons": {"tf": 1}, "mymcdm.weighting.entropy_method": {"tf": 1.4142135623730951}, "mymcdm.weighting.mean_weight": {"tf": 1.4142135623730951}, "mymcdm.weighting.standard_deviation": {"tf": 1}, "mymcdm.weighting.svp": {"tf": 1}, "mymcdm.weighting.critic": {"tf": 1.4142135623730951}, "mymcdm.weighting.pam": {"tf": 1}}, "df": 55}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.inout": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.normalization.logarithmic": {"tf": 1}, "mymcdm.normalization.logarithmic.logarithmic": {"tf": 1}}, "df": 3}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear": {"tf": 1}, "mymcdm.normalization.linear.linear": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1.4142135623730951}}, "df": 5, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.weighting.pairwise_alternatives": {"tf": 1}}, "df": 4}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"mymcdm.inout.save_result": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {"mymcdm": {"tf": 1.7320508075688772}, "mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 3, "o": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"mymcdm.decision": {"tf": 1}, "mymcdm.utils.Result": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor_ranking": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor_ranking": {"tf": 1}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp_cm": {"tf": 1}, "mymcdm.methods.ahp.ahp_cm": {"tf": 1}, "mymcdm.utils.make_ranking": {"tf": 1}}, "df": 4}}}}}, "q": {"docs": {"mymcdm.vikor": {"tf": 1}, "mymcdm.methods.vikor": {"tf": 1}, "mymcdm.methods.vikor.vikor": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"mymcdm": {"tf": 11.313708498984761}}, "df": 1}}}}, "k": {"docs": {"mymcdm": {"tf": 1.7320508075688772}}, "df": 1, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm": {"tf": 1.4142135623730951}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}, "mymcdm.inout.parse_pairwise_format": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}}}}, "j": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}, "mymcdm.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.load_data": {"tf": 1.4142135623730951}, "mymcdm.inout.read_JSON": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}}}}}}, "z": {"docs": {"mymcdm": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"mymcdm.topsis": {"tf": 1}, "mymcdm.methods.topsis": {"tf": 1}, "mymcdm.methods.topsis.topsis": {"tf": 1}, "mymcdm.normalization.max": {"tf": 1}, "mymcdm.normalization.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.sum": {"tf": 1.4142135623730951}, "mymcdm.normalization.linear.linear": {"tf": 1.4142135623730951}, "mymcdm.normalization.max.max": {"tf": 1}, "mymcdm.normalization.sum.sum": {"tf": 1.4142135623730951}, "mymcdm.utils.replace_fractions": {"tf": 1}, "mymcdm.weighting.mean_weight": {"tf": 1}}, "df": 11}}}}, "y": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"mymcdm": {"tf": 1}}, "df": 1}}, "u": {"docs": {"mymcdm.load_data": {"tf": 1}, "mymcdm.inout.load_data": {"tf": 1}}, "df": 2}}}, "x": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "y": {"docs": {"mymcdm.utils.replace_fractions": {"tf": 1}}, "df": 1}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();